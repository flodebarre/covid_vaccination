
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

> # Load the data ####
> 
> # Date for timestamp
> today <- Sys.Date()
> 
> # URL of the data file
> URL <- "https://opendata.ecdc.europa.eu/covid19/vaccine_tracker/csv/data.csv"
> 
> dataFile <- paste0("data/ecdc-vaccination_", today, ".csv") # Name of the output file
> # Download the data
> download.file(URL, dataFile)
essai de l'URL 'https://opendata.ecdc.europa.eu/covid19/vaccine_tracker/csv/data.csv'
Content type 'application/octet-stream' length 5328592 bytes (5.1 MB)
==================================================
downloaded 5.1 MB

> 
> # Load the downloaded dataset
> dat.ECDC <- read.csv(dataFile, stringsAsFactors = FALSE)
> 
> 
> # Clean and reformat the data ####
> 
> # Remove regional data, keep only country data
> dat.ECDC <- dat.ECDC[is.element(dat.ECDC$Region, dat.ECDC$ReportingCountry), ]
> 
> # Load country codes
> # Source: https://gist.github.com/radcliff/f09c0f88344a7fcef373
> # Modified for Greece (was GR, changed into EL)
> cc <- read.csv("../data/countryCodes.csv")
> # Turn into dictionary
> dic.cc <- cc$English.short.name.lower.case
> names(dic.cc) <- cc$Alpha.2.code
> 
> # Add full name of the countries
> dat.ECDC$Country <- dic.cc[dat.ECDC$ReportingCountry]
> 
> # Clean memory
> rm(dic.cc, cc)
> 
> # Check age groups for all countries
> table(dat.ECDC$Country, dat.ECDC$TargetGroup)
                
                 1_Age60+ 1_Age<60 ALL Age0_4 Age10_14 Age15_17 Age18_24
  Austria             195      195 195    195      195      195      195
  Belgium             131      131 156      0        0        0      131
  Bulgaria              0        0 138      0        0        0      132
  Croatia               0        0 185    185      185      185      185
  Cyprus                0        0 129      0       33       80      118
  Czech Republic      139      141 141      0        0        0      141
  Denmark               0        0 128      0        0        0      127
  Estonia               0        0 134      0        0        0      134
  Finland               0        0 200    200      200      200      200
  France                0        0 185      0        0        0       37
  Germany               0        0 129      0        0        0        0
  Greece              127      127 130     50       50       50      127
  Hungary               0        0 201      0        0        0      201
  Iceland               0        0 135    111      111      111      123
  Ireland               0        0 146      0        0        0      145
  Italy                 0        0 143      0        0        0      143
  Latvia                0        0 132      0      132      132      132
  Liechtenstein         0        0  64      0        0        0        0
  Lithuania             0        0 133    133      133      133      133
  Luxembourg            0        0 135      0      135      135      135
  Malta                 0        0 132      0        0        0      132
  Netherlands           0        0 200      0        0        0        0
  Norway                0        0 142      0        0        0      138
  Poland                0        0 160    160      160      160      160
  Portugal              0        0 154      0        0        0      146
  Romania             121      121 121      0        0        0       68
  Slovakia              0        0 146      0       37       84      130
  Slovenia              0        0 127      0        0        0      119
  Spain                 0        0 156    156      156      156      156
  Sweden                0        0 111      0        0       85      108
                
                 Age25_49 Age50_59 Age5_9 Age60_69 Age70_79 Age80+ Age<18
  Austria             195      195    195      195      195    195    195
  Belgium             131      131      0      131      131    131    131
  Bulgaria            132      132      0      132      132    132     60
  Croatia             185      185    185      185      185    185    185
  Cyprus              124      122      0      124      123    123      0
  Czech Republic      140      140      0      137      136    133    113
  Denmark             127      127      0      127      127    127     56
  Estonia             134      134      0      134      134    134     64
  Finland             200      200    200      200      200    200    200
  France               37       37      0       37       37     37     37
  Germany               0        0      0        0        0      0      0
  Greece              127      127     50      127      127    127     50
  Hungary             201      201      0      201      201    201    120
  Iceland             123      123    111      123      123    123      0
  Ireland             145      145      0      145      145    145    145
  Italy               143      143      0      143      143    143    143
  Latvia              132      132      0      132      132    132    132
  Liechtenstein         0        0      0        0        0      0      0
  Lithuania           133      133    133      133      133    133    133
  Luxembourg          135      135      0      135      135    135      0
  Malta               132      132      0      132      132    132    112
  Netherlands           0        0      0        0        0      0      0
  Norway              142      142      0      139      126    104     80
  Poland              160      160    160      160      160    160      0
  Portugal            153      149      0      149      146    140     99
  Romania              68       68      0       68       68     68     24
  Slovakia            133      132      0      132      126    108      0
  Slovenia            127      125      0      125      127    125    101
  Spain               156      156    156      156      156    156    156
  Sweden              111      108      0      110      109    107      0
                
                 AgeUNK HCW LTCF
  Austria             0   0    0
  Belgium           131 131  131
  Bulgaria          132 132  132
  Croatia           185 185  185
  Cyprus             10 121  123
  Czech Republic      0 133  129
  Denmark             0  39   39
  Estonia           134  72   73
  Finland           200   0    0
  France             37   0    0
  Germany             0   0    0
  Greece            127 127   44
  Hungary           201 201  201
  Iceland           123 123  123
  Ireland           145 145  145
  Italy               0 143  143
  Latvia            132 132  132
  Liechtenstein       0   0    0
  Lithuania         133   0    0
  Luxembourg          0 135  135
  Malta             132 132  132
  Netherlands         0   0    0
  Norway              0 127    0
  Poland            160 160    0
  Portugal           18   0    0
  Romania             0 121  121
  Slovakia            0   0    0
  Slovenia            0 120    0
  Spain             156 156  156
  Sweden              0   8   25
> # Germany, The Netherlands and Liechtenstein do not share age data
> 
> # Define age classes
> ac1 <- data.frame(ageClass = c("Age0_4", "Age5_9", "Age10_14", "Age15_17", "Age18_24", "Age25_49", "Age50_59", "Age60_69", "Age70_79", "Age80+"))
> 
> ac2 <- data.frame(ageClass = c("Age<18", "Age18_24", "Age25_49", "Age50_59", "Age60_69", "Age70_79", "Age80+"))
> 
> ac1$minAge <- c(0, 5, 10, 15, 18, 25, 50, 60, 70, 80)
> ac1$maxAge <- c(4, 9, 14, 17, 24, 49, 59, 69, 79, 100)
> ac1$ageWidth <- ac1$maxAge - ac1$minAge + 1
> 
> ac2$minAge <- c(0, 18, 25, 50, 60, 70, 80)
> ac2$maxAge <- c(17, 24, 49, 59, 69, 79, 100)
> ac2$ageWidth <- ac2$maxAge - ac2$minAge + 1
> 
> 
> 
> # Initialize the new dataset
> newdat <- data.frame("TargetGroup" = character(0), 
+                      "FirstDose" = numeric(0), 
+                      "SecondDose" = numeric(0), 
+                      "Population" = numeric(0), 
+                      "Denominator" = numeric(0), 
+                      "Country" = character(0), 
+                      "ReportingCountry" = character(0), 
+                      "minAge" = numeric(0), 
+                      "maxAge" = numeric(0),
+                      "ageWidth" = numeric(0), 
+                      "YearWeekISO" = character(0))
> 
> # Loop on all dates and all countries
> for(thedate in sort(unique(dat.ECDC$YearWeekISO))){
+   for(ctr in unique(dat.ECDC$ReportingCountry)){
+     
+     # Subselect the data until this date and for this country
+     tmp <- dat.ECDC[dat.ECDC$ReportingCountry == ctr & dat.ECDC$YearWeekISO <= thedate, ]
+     
+     if(nrow(tmp) > 1){
+       # If there are data at this date!
+       
+       # Compute cumulated values
+       agg <- aggregate(x = tmp[, c("FirstDose", "SecondDose")], by = list(TargetGroup = tmp[, "TargetGroup"]), FUN = sum)
+       # Get the unique values (e.g. population size should not be summed!)
+       agg2 <- aggregate(x = tmp[, c("Population", "Denominator", "Country", "ReportingCountry")], by = list(TargetGroup = tmp[, "TargetGroup"]), FUN = unique)
+       
+       agg <- merge(agg, agg2, by = "TargetGroup")
+       
+       # If there is no line for Age<18, add it
+       if(all(agg$TargetGroup != "Age<18")){
+         agg <- rbind(agg, c("Age<18", 0, 0, agg[agg$TargetGroup == "ALL", "Population"], NA, agg[agg$TargetGroup == "ALL", "Country"], agg[agg$TargetGroup == "ALL", "ReportingCountry"]))
+       }
+       
+       # Add Denominator to Age<18 if it is missing
+       if(is.na(agg[agg$TargetGroup == "Age<18", "Denominator"])){
+         agg[agg$TargetGroup == "Age<18", "Denominator"] <- as.numeric(agg[agg$TargetGroup == "ALL", "Population"]) - as.numeric(agg[agg$TargetGroup == "ALL", "Denominator"])
+       }
+       
+       # Subselect the age class data that we need
+       # Detailed age classes for children
+       ac.children <- setdiff(ac1$ageClass, ac2$ageClass)
+       # Subset of the data for these age classes
+       tagg <- agg[is.element(agg$TargetGroup, ac.children), ]
+       # NOTE: consider using "any" instead of "all" here (actually all is OK)
+       if(all(is.na(tagg$Denominator))){
+         # If we are missing all the population sizes, use the other age classes (ac2)
+         agg <- agg[is.element(agg$TargetGroup, ac2$ageClass), ]
+         # Add age class information
+         agg <- merge(agg, ac2, by.x = "TargetGroup", by.y = "ageClass", all.x = TRUE)
+       }else{
+         # But if we have some values, use them
+         agg <- agg[is.element(agg$TargetGroup, ac1$ageClass), ]
+         # Add age class information
+         agg <- merge(agg, ac1, by.x = "TargetGroup", by.y = "ageClass", all.x = TRUE)
+       }
+       # Add the date information
+       agg$YearWeekISO <- thedate
+       
+       # Add these data to the new dataset, only if more than one line, i.e. if detail on age classes is available
+       if(nrow(agg) > 1){
+         newdat <- rbind(newdat, agg)
+       }
+     }
+     
+   }
+ }
> 
> # Made numerical values numeric again
> for(col in c("FirstDose", "SecondDose", "Population", "Denominator", "minAge", "maxAge")){
+   newdat[, col] <- as.numeric(newdat[, col])
+ }
> 
> 
> # Save the output
> write.csv(newdat, file = paste0("data/ecdc-vaccination_cumulated_", today, ".csv"), row.names = FALSE)
> 
> proc.time()
utilisateur     système      écoulé 
      8.827       0.770      15.955 
